<?php
/**
 * This file is part of OpenMediaVault.
 *
 * @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
 * @author    Volker Theile <volker.theile@openmediavault.org>
 * @copyright Copyright (c) 2009-2016 Volker Theile
 *
 * OpenMediaVault is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * OpenMediaVault is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.
 */
namespace OMV\Config;

/**
 * @ingroup api
 */
class DatabaseBackendQueryBuilder {
	private $model = null;

	/**
	 * @param model The data model identifier or object.
	 */
	public function __construct($model) {
		if ($model instanceof DataModel) {
			$this->model = $model;
		} else {
			$mngr = \OMV\DataModel\Manager::getInstance();
			$this->model = $mngr->getModel($model);
		}
	}

	private function getModel() {
		return $this->model;
	}

	private function getQueryInfo()  {
		// The queryinfo information looks like:
		// "queryinfo": {
		// 	   "xpath": "//system/certificates/sslcertificate",
		//     "iterable": true,
		// 	   "idproperty": "uuid",
		// 	   "refproperty": "sslcertificateref"
		// }
		return $this->getModel()->getQueryInfo();
	}

	final public function buildGetQuery($idValue = NULL) {
		$qi = $this->getQueryInfo();
		$xpath = $qi['xpath'];
		if (TRUE === boolval($qi['iterable'])) {
			$xpath = $this->buildGetByFilterQuery([
				  "operator" => "stringEquals",
				  "arg0" => $qi['idproperty'],
				  "arg1" => $idValue
			  ]);
		}
		return $xpath;
	}

	/**
	 * Build the predicate for the specified filter.
	 * Supported operators:
	 * .-------------------------------------------------.
	 * | operator         | arg0          | arg1         |
	 * |------------------|---------------|--------------|
	 * | and              | assoc. array  | assoc. array |
	 * | or               | assoc. array  | assoc. array |
	 * | equals           | property name | value        |
	 * | notEquals        | property name | value        |
	 * | enum             | property name | array        |
	 * | stringEquals     | property name | value        |
	 * | stringNotEquals  | property name | value        |
	 * | stringContains   | property name | value        |
	 * | stringStartsWith | property name | value        |
	 * | stringEnum       | property name | array        |
	 * | not              | assoc. array  |              |
	 * | less             | property name | value        |
	 * | greater          | property name | value        |
	 * | lessEqual        | property name | value        |
	 * | greaterEqual     | property name | value        |
	 * '-------------------------------------------------'
	 * Example 1:
	 * [type='bond' and devicename='bond0']
	 * The filter for the above predicate:
	 * [
	 *     "operator": "and",
	 *     "arg0": [
	 *         "operator" => "stringEquals",
	 *         "arg0" => "type",
	 *         "arg1" => "bond"
	 *     ],
	 *     "arg1": [
	 *         "operator" => "stringEquals",
	 *         "arg0" => "devicename",
	 *         "arg1" => "bond0"
	 *     ]
	 * ]
	 * Example 2:
	 * [type='bond' and contains(slaves,'eth0')]
	 * The filter for the above predicate:
	 * [
	 *     "operator": "and",
	 *     "arg0": [
	 *         "operator" => "stringEquals",
	 *         "arg0" => "type",
	 *         "arg1" => "bond"
	 *     ],
	 *     "arg1": [
	 *         "operator" => "stringContains",
	 *         "arg0" => "slaves",
	 *         "arg1" => "eth0"
	 *     ]
	 * ]
	 * Example 3:
	 * [not type='vlan']
	 * The filter for the above predicate:
	 * [
	 *     "operator": "not",
	 *     "arg0": [
	 *         "operator" => "stringEquals",
	 *         "arg0" => "type",
	 *         "arg1" => "vlan"
	 *     ]
	 * ]
	 */
	final public function buildPredicate($filter) {
		if (FALSE === is_array($filter)) {
			throw new InvalidArgumentException(
			  "Filter is not an associative array.");
		}
		$result = "";
		switch ($filter['operator']) {
		case "and":
		case "or":
			$result = sprintf("%s %s %s",
			  $this->buildPredicate($filter['arg0']),
			  $filter['operator'],
			  $this->buildPredicate($filter['arg1']));
			break;
		case "=":
		case "equals":
			$result = sprintf("%s=%s", $filter['arg0'], $filter['arg1']);
			break;
		case "!=":
		case "notEquals":
			$result = sprintf("%s!=%s", $filter['arg0'], $filter['arg1']);
			break;
		case "enum":
			$parts = [];
			foreach ($filter['arg1'] as $enumk => $enumv) {
				$parts[] = sprintf("%s=%s", $filter['arg0'], $enumv);
			}
			$result = sprintf("(%s)", implode(" or ", $parts));
			break;
		case "==":
		case "stringEquals":
			$result = sprintf("%s=%s", $filter['arg0'],
			  escapeshellarg($filter['arg1']));
			break;
		case "!==":
		case "stringNotEquals":
			$result = sprintf("%s!=%s", $filter['arg0'],
			  escapeshellarg($filter['arg1']));
			break;
		case "stringContains":
			$result = sprintf("contains(%s,%s)", $filter['arg0'],
			  escapeshellarg($filter['arg1']));
			break;
		case "stringStartsWith":
			$result = sprintf("starts-with(%s,%s)", $filter['arg0'],
			  escapeshellarg($filter['arg1']));
			break;
		case "stringEnum":
			$parts = [];
			foreach ($filter['arg1'] as $enumk => $enumv) {
				$parts[] = sprintf("%s=%s", $filter['arg0'],
				  escapeshellarg($enumv));
			}
			$result = sprintf("(%s)", implode(" or ", $parts));
			break;
		case "!":
		case "not":
			$result = sprintf("not(%s)",
			  $this->buildPredicate($filter['arg0']));
			break;
		case "<":
		case "less":
			$result = sprintf("%s<%s", $filter['arg0'], $filter['arg1']);
			break;
		case ">":
		case "greater":
			$result = sprintf("%s>%s", $filter['arg0'], $filter['arg1']);
			break;
		case "<=":
		case "lessEqual":
			$result = sprintf("%s<=%s", $filter['arg0'], $filter['arg1']);
			break;
		case ">=":
		case "greaterEqual":
			$result = sprintf("%s>=%s", $filter['arg0'], $filter['arg1']);
			break;
		}
		return $result;
	}

	final public function buildGetByFilterQuery($filter) {
		$qi = $this->getQueryInfo();
		return sprintf("%s[%s]", $qi['xpath'], $this->buildPredicate($filter));
	}

	final public function buildGetByPredicateQuery($predicate) {
		$qi = $this->getQueryInfo();
		return sprintf("%s[%s]", $qi['xpath'], $predicate);
	}

	final public function buildSetQuery(ConfigObject $object) {
		$qi = $this->getQueryInfo();
		$xpath = $qi['xpath'];
		if (TRUE === boolval($qi['iterable'])) {
			if (FALSE === $object->isNew()) {
				// Update the element with the specified identifier.
				$xpath = sprintf("%s[%s='%s']", $qi['xpath'],
				  $qi['idproperty'], $object->get($qi['idproperty']));
			} else {
				// Insert a new element.
				$parts = explode("/", $xpath);
				$elementName = array_pop($parts);
				$xpath = substr($xpath, 0, strrpos($xpath, $elementName) - 1);
			}
		}
		return $xpath;
	}

	final public function buildDeleteQuery(ConfigObject $object) {
		$qi = $this->getQueryInfo();
		$xpath = $qi['xpath'];
		if (TRUE === boolval($qi['iterable'])) {
			$xpath = $this->buildGetByFilterQuery([
				  "operator" => "stringEquals",
				  "arg0" => $qi['idproperty'],
				  "arg1" => $object->get($qi['idproperty'])
			  ]);
		}
		return $xpath;
	}

	final public function buildIsReferencedQuery(ConfigObject $object) {
		$qi = $this->getQueryInfo();
		return sprintf("//%s[contains(.,'%s')]", $qi['refproperty'],
		  $object->get($qi['idproperty']));
	}

	final public function buildExistsQuery($filter = NULL) {
		$qi = $this->getQueryInfo();
		if (is_null($filter))
			return $qi['xpath'];
		return $this->buildGetByFilterQuery($filter);
	}
}
