<?php
/**
 * This file is part of OpenMediaVault.
 *
 * @license   http://www.gnu.org/licenses/gpl.html GPL Version 3
 * @author    Volker Theile <volker.theile@openmediavault.org>
 * @copyright Copyright (c) 2009-2016 Volker Theile
 *
 * OpenMediaVault is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * any later version.
 *
 * OpenMediaVault is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with OpenMediaVault. If not, see <http://www.gnu.org/licenses/>.
 */
require_once("openmediavault/globals.inc");

class OMVRpcServiceSystem extends \OMV\Rpc\ServiceAbstract {
	/**
	 * Get the RPC service name.
	 */
	public function getName() {
		return "System";
	}

	/**
	 * Initialize the RPC service.
	 */
	public function initialize() {
		$this->registerMethod("noop");
		$this->registerMethod("getTopInfo");
		$this->registerMethod("getShells");
		$this->registerMethod("reboot");
		$this->registerMethod("shutdown");
		$this->registerMethod("standby");
		$this->registerMethod("suspend");
		$this->registerMethod("hibernate");
		$this->registerMethod("getTimeSettings");
		$this->registerMethod("setTimeSettings");
		$this->registerMethod("setDate");
		$this->registerMethod("setNtpDate");
		$this->registerMethod("getTimeZoneList");
		$this->registerMethod("getInformation");
		$this->registerMethod("getDiagnosticReport");
	}

	/**
	 * This function can be used to check if the communication between
	 * WebGUI and server exists.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return A quotation from the Dune novel, which is a string.
	 */
	public function noop($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		return array_rand_value($GLOBALS['OMV_DUNE_QUOTES']);
	}

	/**
	 * Get the list of running processes and a system summary information
	 * as well.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return The 'top' console command output.
	 */
	public function getTopInfo($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Get task overview.
		$cmd = new \OMV\System\Process("top", "-b", "-n 1");
		$cmd->setRedirect2to1(TRUE);
		$cmd->execute($output);
		return implode("\n", $output);
	}

	/**
	 * Get a list of available shells.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return An array with the available shells.
	 */
	public function getShells($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Prepare result list.
		$result = array(
			"/bin/false",
			"/usr/sbin/nologin"
		);
		// Get list of available shells.
		$shells = file("/etc/shells");
		foreach ($shells as $shellk => $shellv) {
			$shellv = trim($shellv);
			if (is_executable($shellv))
				$result[] = $shellv;
		}
		return $result;
	}

	/**
	 * Reboot the system.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return None.
	 */
	public function reboot($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		$pm = new \OMV\System\PowerManagement();
		$pm->reboot();
	}

	/**
	 * Shut down the system.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return None.
	 */
	public function shutdown($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		$pm = new \OMV\System\PowerManagement();
		$pm->shutdown();
	}

	/**
	 * Put the machine in a sleep state. If suspend to disk or RAM is not
	 * supported the system will be shut down. The system will be put into
	 * one of the following state depending on which state is supported: <ul>
	 * \li Hybrid suspend (disk and RAM)
	 * \li Suspend to disk
	 * \li Suspend to RAM
	 * \li Shut down and turn of system
	 * </ul>
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return None.
	 */
	public function standby($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		$pm = new \OMV\System\PowerManagement();
		$pm->standby();
	}

	/**
	 * Put the machine into suspend to RAM (STR) mode. If this state is not
	 * supported the system will be shut down.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return None.
	 */
	public function suspend($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		$pm = new \OMV\System\PowerManagement();
		$pm->suspend();
	}

	/**
	 * Put the machine into suspend to disk (STD) mode. If this state is not
	 * supported the system will be shut down.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return None.
	 */
	public function hibernate($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		$pm = new \OMV\System\PowerManagement();
		$pm->hibernate();
	}

	/**
	 * Get system time settings.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return The configuration object.
	 */
	public function getTimeSettings($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Get configuration object.
		$db = \OMV\Config\Database::getInstance();
		$object = $db->get("conf.system.time");
		// Prepare the result values.
		return array(
			"date" => array(
				"local" => strftime("%c"),
				"ISO8601" => date("c")
			),
			"timezone" => $object->get("timezone"),
			"ntpenable" => $object->get("ntp.enable"),
			"ntptimeservers" => $object->get("ntp.timeservers")
		);
	}

	/**
	 * Set system time settings.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return None.
	 */
	public function setTimeSettings($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Validate the parameters of the RPC service method.
		$this->validateMethodParams($params, "rpc.system.settimesettings");
		// Prepare the configuration object.
		$object = new \OMV\Config\ConfigObject("conf.system.time");
		$object->set("timezone", $params['timezone']);
		$object->set("ntp.enable", $params['ntpenable']);
		$object->set("ntp.timeservers", $params['ntptimeservers']);
		// Update the configuration object.
		$db = \OMV\Config\Database::getInstance();
		$db->set($object);
		// Notify configuration changes.
		$dispatcher = \OMV\Engine\Notify\Dispatcher::getInstance();
		$dispatcher->notify(OMV_NOTIFY_MODIFY,
		  "org.openmediavault.system.time", $object->getAssoc());
	}

	/**
	 * Set the system date.
	 * @param params An array containing the following fields:
	 *   \em timestamp The date to set as UNIX timestamp.
	 * @param context The context of the caller.
	 * @return None.
	 * @throw \OMV\ExecException
	 */
	public function setDate($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Validate the parameters of the RPC service method.
		$this->validateMethodParams($params, "rpc.system.setdate");
		// Set the system date.
		$cmdArgs = array();
		$cmdArgs[] = sprintf("--set='@%d'", $params['timestamp']);
		$cmd = new \OMV\System\Process("date", $cmdArgs);
		$cmd->setRedirect2to1(TRUE);
		$cmd->execute();
	}

	/**
	 * Set the system date via NTP.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return None.
	 * @throw \OMV\ExecException
	 */
	public function setNtpDate($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Set the system date via NTP.
		$cmdArgs = array();
		$cmdArgs[] = "-g";
		$cmdArgs[] = "-q";
		$cmd = new \OMV\System\Process("ntpd", $cmdArgs);
		$cmd->setRedirect2to1(TRUE);
		$cmd->execute();
	}

	/**
	 * Get a list of time zones.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return An array with the time zone strings.
	 */
	public function getTimeZoneList($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Prepare list of time zone identifiers (for ComboBox store).
		$timezoneIdentifiers = DateTimeZone::listIdentifiers();
		sort($timezoneIdentifiers, SORT_NATURAL);
		return $timezoneIdentifiers;
	}

	/**
	 * Get various system information.
	 * @param params The method parameters.
	 * @param context The context of the caller.
	 * @return An array of system information.
	 */
	public function getInformation($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		// Get various system informations.
		$prd = new \OMV\ProductInfo();
		$uname = posix_uname();
		$memStats = \OMV\System\System::getMemoryStats();
		$memStats['wobufferscache']['percentage'] = round(
		  ($memStats['wobufferscache']['used'] * 100) /
		  $memStats['mem']['total']);
		$cpuStats = \OMV\System\System::getCPUStats();
		$index = 0;
		return array(
			array(
				"name" => gettext("Hostname"),
				"value" => \OMV\System\Net\Dns::getFqdn(),
				"type" => "string",
				"index" => $index++),
			array(
				"name" => gettext("Version"),
				"value" => sprintf("%s (%s)", $prd->getVersion(),
				  $prd->getVersionName()),
				"type" => "string",
				"index" => $index++),
			array(
				"name" => gettext("Processor"),
				"value" => $cpuStats['modelname'],
				"type" => "string",
				"index" => $index++),
			array(
				"name" => gettext("Kernel"),
				"value" => sprintf("%s %s", $uname['sysname'],
				  $uname['release']),
				"type" => "string",
				"index" => $index++),
			array(
				"name" => gettext("System time"),
				"value" => strftime("%c"),
				"type" => "string",
				"index" => $index++),
			array(
				"name" => gettext("Uptime"),
				"value" => \OMV\System\System::uptime(),
				"type" => "string",
				"index" => $index++),
			array(
				"name" => gettext("Load average"),
				"value" => \OMV\System\System::getLoadAverage(),
				"type" => "string",
				"index" => $index++),
			array(
				"name" => gettext("CPU usage"),
				"value" => array(
					"text" => sprintf("%d%%", $cpuStats['usage']),
					"value" => $cpuStats['usage']
				),
				"type" => "progress",
				"index" => $index++),
			array(
				"name" => gettext("Memory usage"),
				"value" => array(
					"text" => sprintf("%d%% of %s",
					  $memStats['wobufferscache']['percentage'],
					  binary_format($memStats['mem']['total'])),
					"value" => $memStats['wobufferscache']['percentage']
				),
				"type" => "progress",
				"index" => $index++)
		);
	}

	/**
	 * Get the 'omv-sysinfo' diagnostic report.
	 * @param params The method parameters.
	 *   The method does not have any paramaters.
	 * @param context The context of the caller.
	 * @return A quotation from the Dune novel, which is a string.
	 */
	public function getDiagnosticReport($params, $context) {
		// Validate the RPC caller context.
		$this->validateMethodContext($context, array(
			  "role" => OMV_ROLE_ADMINISTRATOR
		  ));
		$cmd = new \OMV\System\Process("omv-sysinfo");
		$cmd->setRedirect2to1(TRUE);
		$cmd->execute($output);
		return implode("\n", $output);
	}
}
